import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

interface Job {
  id?: number; // Optional since it will be generated by the backend
  title: string;
  description: string;
  location: string;
  postedAt: string;
  workplaceType: 'On-site' | 'Remote' | 'Hybrid';
  salary: string;
  workHours: 'Full-time' | 'Part-time';
}



const JobPostingForm: React.FC = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [location, setLocation] = useState('');
  const [workplaceType, setWorkplaceType] = useState<
    'On-site' | 'Remote' | 'Hybrid'
  >('On-site');
  const [salary, setSalary] = useState('');
  const [workHours, setWorkHours] = useState<'Full-time' | 'Part-time'>(
    'Full-time'
  );
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const newJob: Job = {
      id: Date.now(),
      title,
      description,
      location,
      postedAt: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format
      workplaceType,
      salary,
      workHours,
    };
    setLoading(true);

    try {
      const response = await fetch(
        'https://jobs-admin-dashboard-backend-test.vercel.app/jobs',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(newJob),
        }
      );

      if (!response.ok) {
        throw new Error('Failed to post job');
      }

      // Add job to the frontend immediately
    //   onJobPost(newJob);
      navigate('/employer-homepage'); // Navigate back to homepage
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container flex flex-col justify-center mx-auto p-4 max-w-md h-screen">
      <button
        onClick={() => navigate('/employer-homepage')}
        className="text-blue-600 mb-4 self-start"
      >
        &larr; Back to Homepage
      </button>

      <h1 className="text-2xl font-bold mb-6">Post a New Job</h1>

      <form onSubmit={handleSubmit} className="bg-white p-6 shadow rounded-lg">
        <div className="mb-4">
          <label className="block text-gray-700">Job Title</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Description</label>
          <input
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Location</label>
          <input
            type="text"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Salary</label>
          <input
            type="text"
            value={salary}
            onChange={(e) => setSalary(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Work Hours</label>
          <select
            value={workHours}
            onChange={(e) =>
              setWorkHours(e.target.value as 'Full-time' | 'Part-time')
            }
            className="w-full p-2 border border-gray-300 rounded"
            required
          >
            <option value="Full-time">Full-time</option>
            <option value="Part-time">Part-time</option>
          </select>
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Workplace Type</label>
          <select
            value={workplaceType}
            onChange={(e) =>
              setWorkplaceType(
                e.target.value as 'On-site' | 'Remote' | 'Hybrid'
              )
            }
            className="w-full p-2 border border-gray-300 rounded"
            required
          >
            <option value="On-site">On-site</option>
            <option value="Remote">Remote</option>
            <option value="Hybrid">Hybrid</option>
          </select>
        </div>

        <button
          type="submit"
          disabled={loading}
          className={`w-full p-2 text-white rounded ${
            loading ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'
          }`}
        >
          {loading ? 'Posting...' : 'Post Job'}
        </button>
      </form>
    </div>
  );
};

export default JobPostingForm;
